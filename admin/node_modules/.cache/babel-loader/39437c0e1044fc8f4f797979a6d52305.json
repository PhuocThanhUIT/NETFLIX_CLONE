{"ast":null,"code":"import axios from \"axios\";\nimport { createListFailure, createListStart, createListSuccess, deleteListFailure, deleteListStart, deleteListSuccess, getListsFailure, getListsStart, getListsSuccess, updateListFailure, updateListStart, updateListSuccess } from \"./ListActions\";\nexport const getLists = async dispatch => {\n  dispatch(getListsStart());\n\n  try {\n    const res = await axios.get(\"/lists\", {\n      headers: {\n        token: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken\n      }\n    });\n    dispatch(getListsSuccess(res.data));\n  } catch (err) {\n    dispatch(getListsFailure());\n  }\n}; //create\n\nexport const createList = async (list, dispatch) => {\n  dispatch(createListStart());\n\n  try {\n    const res = await axios.post(\"/lists\", list, {\n      headers: {\n        token: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken\n      }\n    });\n    dispatch(createListSuccess(res.data));\n  } catch (err) {\n    dispatch(createListFailure());\n  }\n}; //update\n\nexport const updateList = async (id, list, dispatch) => {\n  dispatch(updateListStart());\n\n  try {\n    const res = await axios.put(\"/lists/\" + id, list, {\n      headers: {\n        token: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken\n      }\n    });\n    dispatch(updateListSuccess(res.data));\n  } catch (err) {\n    dispatch(updateListFailure());\n  }\n}; //delete\n\nexport const deleteList = async (id, dispatch) => {\n  dispatch(deleteListStart());\n\n  try {\n    await axios.delete(\"/lists/\" + id, {\n      headers: {\n        token: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken\n      }\n    });\n    dispatch(deleteListSuccess(id));\n  } catch (err) {\n    dispatch(deleteListFailure());\n  }\n};","map":{"version":3,"sources":["C:/Users/HứaPhướcThanh/Pictures/NETFLIX_CLONE/admin/src/context/listContext/apiCalls.js"],"names":["axios","createListFailure","createListStart","createListSuccess","deleteListFailure","deleteListStart","deleteListSuccess","getListsFailure","getListsStart","getListsSuccess","updateListFailure","updateListStart","updateListSuccess","getLists","dispatch","res","get","headers","token","JSON","parse","localStorage","getItem","accessToken","data","err","createList","list","post","updateList","id","put","deleteList","delete"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  createListFailure,\r\n  createListStart,\r\n  createListSuccess,\r\n  deleteListFailure,\r\n  deleteListStart,\r\n  deleteListSuccess,\r\n  getListsFailure,\r\n  getListsStart,\r\n  getListsSuccess,\r\n  updateListFailure,\r\n  updateListStart,\r\n  updateListSuccess,\r\n} from \"./ListActions\";\r\n\r\nexport const getLists = async (dispatch) => {\r\n  dispatch(getListsStart());\r\n  try {\r\n    const res = await axios.get(\"/lists\", {\r\n      headers: {\r\n        token: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\r\n      },\r\n    });\r\n    dispatch(getListsSuccess(res.data));\r\n  } catch (err) {\r\n    dispatch(getListsFailure());\r\n  }\r\n};\r\n\r\n//create\r\nexport const createList = async (list, dispatch) => {\r\n  dispatch(createListStart());\r\n  try {\r\n    const res = await axios.post(\"/lists\", list, {\r\n      headers: {\r\n        token: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\r\n      },\r\n    });\r\n    dispatch(createListSuccess(res.data));\r\n  } catch (err) {\r\n    dispatch(createListFailure());\r\n  }\r\n};\r\n//update\r\nexport const updateList = async (id, list, dispatch) => {\r\n  dispatch(updateListStart());\r\n  try {\r\n    const res = await axios.put(\"/lists/\"+ id, list, {\r\n      headers: {\r\n        token: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\r\n      },\r\n    });\r\n    dispatch(updateListSuccess(res.data));\r\n  } catch (err) {\r\n    dispatch(updateListFailure());\r\n  }\r\n};\r\n\r\n//delete\r\nexport const deleteList = async (id, dispatch) => {\r\n  dispatch(deleteListStart());\r\n  try {\r\n    await axios.delete(\"/lists/\" + id, {\r\n      headers: {\r\n        token: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\r\n      },\r\n    });\r\n    dispatch(deleteListSuccess(id));\r\n  } catch (err) {\r\n    dispatch(deleteListFailure());\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}