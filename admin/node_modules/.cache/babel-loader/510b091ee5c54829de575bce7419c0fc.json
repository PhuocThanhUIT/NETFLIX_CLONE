{"ast":null,"code":"import axios from \"axios\";\nimport { createMovieFailure, createMovieStart, createMovieSuccess, deleteMovieFailure, deleteMovieStart, deleteMovieSuccess, getMoviesFailure, getMoviesStart, getMoviesSuccess } from \"./MovieActions\";\nexport const getMovies = async dispatch => {\n  dispatch(getMoviesStart());\n\n  try {\n    const res = await axios.get(\"/movies\", {\n      headers: {\n        token: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken\n      }\n    });\n    dispatch(getMoviesSuccess(res.data));\n  } catch (err) {\n    dispatch(getMoviesFailure());\n  }\n}; //create\n\nexport const createMovie = async (movie, dispatch) => {\n  dispatch(createMovieStart());\n\n  try {\n    const res = await axios.post(\"/movies\", movie, {\n      headers: {\n        token: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken\n      }\n    });\n    dispatch(createMovieSuccess(res.data));\n  } catch (err) {\n    dispatch(createMovieFailure());\n  }\n}; //update\n\nexport const updateMovie = async (id, movie, dispatch) => {\n  dispatch(updateMovieStart());\n\n  try {\n    const res = await axios.put(\"/movies/\" + id, movie, {\n      headers: {\n        token: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken\n      }\n    });\n    dispatch(updateMovieSuccess(id, res.data));\n  } catch (err) {\n    dispatch(updateMovieFailure());\n  }\n}; //delete\n\nexport const deleteMovie = async (id, dispatch) => {\n  dispatch(deleteMovieStart());\n\n  try {\n    await axios.delete(\"/movies/\" + id, {\n      headers: {\n        token: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken\n      }\n    });\n    dispatch(deleteMovieSuccess(id));\n  } catch (err) {\n    dispatch(deleteMovieFailure());\n  }\n};","map":{"version":3,"sources":["C:/Users/HứaPhướcThanh/Pictures/NETFLIX_CLONE/admin/src/context/movieContext/apiCalls.js"],"names":["axios","createMovieFailure","createMovieStart","createMovieSuccess","deleteMovieFailure","deleteMovieStart","deleteMovieSuccess","getMoviesFailure","getMoviesStart","getMoviesSuccess","getMovies","dispatch","res","get","headers","token","JSON","parse","localStorage","getItem","accessToken","data","err","createMovie","movie","post","updateMovie","id","updateMovieStart","put","updateMovieSuccess","updateMovieFailure","deleteMovie","delete"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  createMovieFailure,\r\n  createMovieStart,\r\n  createMovieSuccess,\r\n  deleteMovieFailure,\r\n  deleteMovieStart,\r\n  deleteMovieSuccess,\r\n  getMoviesFailure,\r\n  getMoviesStart,\r\n  getMoviesSuccess,\r\n} from \"./MovieActions\";\r\n\r\nexport const getMovies = async (dispatch) => {\r\n  dispatch(getMoviesStart());\r\n  try {\r\n    const res = await axios.get(\"/movies\", {\r\n      headers: {\r\n        token: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\r\n      },\r\n    });\r\n    dispatch(getMoviesSuccess(res.data));\r\n  } catch (err) {\r\n    dispatch(getMoviesFailure());\r\n  }\r\n};\r\n\r\n//create\r\nexport const createMovie = async (movie, dispatch) => {\r\n  dispatch(createMovieStart());\r\n  try {\r\n    const res = await axios.post(\"/movies\", movie, {\r\n      headers: {\r\n        token: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\r\n      },\r\n    });\r\n    dispatch(createMovieSuccess(res.data));\r\n  } catch (err) {\r\n    dispatch(createMovieFailure());\r\n  }\r\n};\r\n//update\r\nexport const updateMovie = async (id, movie, dispatch) => {\r\n  dispatch(updateMovieStart());\r\n  try {\r\n    const res = await axios.put(\"/movies/\"+id, movie, {\r\n      headers: {\r\n        token: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\r\n      },\r\n    });\r\n    dispatch(updateMovieSuccess(id,res.data));\r\n  } catch (err) {\r\n    dispatch(updateMovieFailure());\r\n  }\r\n};\r\n\r\n//delete\r\nexport const deleteMovie = async (id, dispatch) => {\r\n  dispatch(deleteMovieStart());\r\n  try {\r\n    await axios.delete(\"/movies/\" + id, {\r\n      headers: {\r\n        token: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\r\n      },\r\n    });\r\n    dispatch(deleteMovieSuccess(id));\r\n  } catch (err) {\r\n    dispatch(deleteMovieFailure());\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}